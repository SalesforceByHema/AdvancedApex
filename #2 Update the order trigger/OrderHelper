public class OrderHelper {

    /**
     * @name AfterUpdate
     * @description 
     * @param List<Order> newList
     * @param List<Order> oldList
     * @return void
    **/
    public static void AfterUpdate(List<Order> newList, List<Order> oldList){
        Set<Id> orderIds = new Set<Id>();
        for ( Integer i=0; i<newList.size(); i++ ){
            if ( newList[i].Status == Constants.ACTIVATED_ORDER_STATUS && oldList[i].Status != Constants.ACTIVATED_ORDER_STATUS ){
                orderIds.add(newList[i].Id);
            }
        }
        RollUpOrderItems(orderIds);
    }

    /**
     * @name RollUpOrderItems
     * @description Given a set of Activated Order ids, query the child Order Items and related Products to calculate Inventory levels
     * @param Set<Id> activatedOrderIds
     * @return void
    **/
    public static void RollUpOrderItems(Set<Id> activatedOrderIds){
        //ToDo: Declare a Map named "productMap" of Ids to Product2 records
        Map<id,Product2> productMap=new Map<id,Product2>();

        //ToDo: Loop through a query of OrderItems related to the activatedOrderIds
        List<OrderItem> OrderItems=[select OrderId,Product2Id,Product2.Name from OrderItem where OrderId IN:activatedOrderIds];
        for(OrderItem o:OrderItems){
            productMap.put(o.Product2Id,o.Product2);
        }
        System.debug(productMap);
			set<id> ProductMapKeys=productMap.keySet();
        	
            //ToDo: Populate the map with the Id of the related Product2 as the key and Product2 record as the value
		for(AggregateResult ar:[select Product2Id,sum(Quantity) quantity
                                 from OrderItem
                                 where Product2Id in: ProductMapKeys 
                                 Group By Product2Id])
        {
                         Id pid=(id)ar.get('Product2Id');
            			decimal qty=(decimal)ar.get('quantity');
            if(productMap.containsKey(pid)){
                Product2 prod=productMap.get(pid);
                prod.Quantity_Ordered__c=qty;
            }
         }
           
        //ToDo: Loop through a query that aggregates the OrderItems related to the Products in the ProductMap keyset

        //ToDo: Perform an update on the records in the productMap
        update productMap.values();
    }

}
